name: Build and Deploy to ECS

on:

  push:

    branches:

      - main

env:

  AWS_REGION: eu-north-1

  ECR_REPOSITORY: reactapp/adminapp

  ECS_CLUSTER: reactapp-cluster1

  ECS_SERVICE: my-task-family-service-qce8ygru

  TASK_DEF_FILE: ecs-task-definition.json

  CONTAINER_NAME: reactappcontainer

  TASK_FAMILY: my-task-family

jobs:

  deploy:

    runs-on: ubuntu-latest

    permissions:

      id-token: write

      contents: read

    steps:

      - name: Checkout code

        uses: actions/checkout@v4

      - name: Configure AWS credentials

        uses: aws-actions/configure-aws-credentials@v2

        with:

          role-to-assume: arn:aws:iam::095927792931:role/github-deployer-role

          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR

        id: login-ecr

        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, tag, and push Docker image

        id: build-image

        run: |

          IMAGE_URI=${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}

          IMAGE_TAG_SHA=$IMAGE_URI:${{ github.sha }}

          IMAGE_TAG_LATEST=$IMAGE_URI:latest

          docker build -t $IMAGE_TAG_SHA -t $IMAGE_TAG_LATEST .

          docker push $IMAGE_TAG_SHA

          docker push $IMAGE_TAG_LATEST

          echo "IMAGE_URI=$IMAGE_TAG_SHA" >> $GITHUB_ENV

      - name: Render ECS task definition

        id: task-def

        uses: aws-actions/amazon-ecs-render-task-definition@v1

        with:

          task-definition: ${{ env.TASK_DEF_FILE }}

          container-name: ${{ env.CONTAINER_NAME }}

          image: ${{ env.IMAGE_URI }}

      - name: Deploy to ECS

        uses: aws-actions/amazon-ecs-deploy-task-definition@v1

        with:

          task-definition: ${{ steps.task-def.outputs.task-definition }}

          service: ${{ env.ECS_SERVICE }}

          cluster: ${{ env.ECS_CLUSTER }}

          wait-for-service-stability: true


